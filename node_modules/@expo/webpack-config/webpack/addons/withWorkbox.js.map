{"version":3,"file":"withWorkbox.js","sourceRoot":"","sources":["../../src/addons/withWorkbox.ts"],"names":[],"mappings":"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","sourcesContent":["import { ensureSlash } from '@expo/config/paths';\nimport CopyPlugin from 'copy-webpack-plugin';\nimport { ensureDirSync, writeFileSync } from 'fs-extra';\nimport { join } from 'path';\nimport {\n  GenerateSW,\n  GenerateSWOptions,\n  InjectManifest,\n  InjectManifestOptions,\n} from 'workbox-webpack-plugin';\n\nimport { getPaths } from '../env';\nimport { AnyConfiguration } from '../types';\nimport { resolveEntryAsync } from '../utils';\n\n/**\n * @internal\n */\nexport type OfflineOptions = {\n  projectRoot?: string;\n  serviceWorkerPath?: string;\n  autoRegister?: boolean;\n  dev?: boolean;\n  // https://developers.google.com/web/ilt/pwa/introduction-to-service-worker#registration_and_scope\n  publicUrl?: string;\n  scope?: string;\n  // when `true` then `generateSWOptions` is used, otherwise `injectManifestOptions` is used.\n  useServiceWorker?: boolean;\n  generateSWOptions?: GenerateSWOptions;\n  injectManifestOptions?: InjectManifestOptions;\n};\n\nconst defaultInjectManifestOptions = {\n  exclude: [\n    /\\.LICENSE$/,\n    /\\.map$/,\n    /asset-manifest\\.json$/,\n    // Exclude all apple touch images because they're cached locally after the PWA is added.\n    // /^\\bapple.*\\.png$/,\n  ],\n};\n\nconst runtimeCache = {\n  handler: 'networkFirst',\n  urlPattern: /^https?.*/,\n  options: {\n    cacheName: 'offlineCache',\n    expiration: {\n      maxEntries: 200,\n    },\n  },\n};\n\nconst defaultGenerateSWOptions: GenerateSWOptions = {\n  ...defaultInjectManifestOptions,\n  clientsClaim: true,\n  skipWaiting: true,\n  navigateFallbackBlacklist: [\n    // Exclude URLs starting with /_, as they're likely an API call\n    new RegExp('^/_'),\n    // Exclude URLs containing a dot, as they're likely a resource in\n    // public/ and not a SPA route\n    new RegExp('/[^/]+\\\\.[^/]+$'),\n  ],\n  // @ts-ignore: Webpack throws if `NetworkFirst` is not `networkFirst`\n  runtimeCaching: [runtimeCache],\n};\n\n/**\n * Add offline support to the provided Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param options configure the service worker.\n * @category addons\n */\nexport default function withWorkbox(\n  webpackConfig: AnyConfiguration,\n  options: OfflineOptions = {}\n): AnyConfiguration {\n  if (!webpackConfig.plugins) webpackConfig.plugins = [];\n\n  const {\n    projectRoot,\n    autoRegister = true,\n    publicUrl = '',\n    scope,\n    useServiceWorker = true,\n    generateSWOptions = {},\n    injectManifestOptions = {},\n  } = options;\n\n  const locations = getPaths(projectRoot!, webpackConfig.mode);\n\n  webpackConfig.plugins.push(\n    new CopyPlugin([\n      {\n        from: locations.template.registerServiceWorker,\n        to: locations.production.registerServiceWorker,\n        transform(content) {\n          return content\n            .toString()\n            .replace('SW_PUBLIC_URL', publicUrl)\n            .replace('SW_PUBLIC_SCOPE', ensureSlash(scope || publicUrl, true));\n        },\n      },\n    ])\n  );\n\n  // Always register general service worker\n  const expoEntry = webpackConfig.entry;\n  webpackConfig.entry = async () => {\n    const entries = await resolveEntryAsync(expoEntry);\n    const swPath = join(locations.production.registerServiceWorker);\n    if (entries.app && !entries.app.includes(swPath) && autoRegister) {\n      ensureDirSync(locations.production.folder);\n      writeFileSync(swPath, '// noop', 'utf8');\n      if (!Array.isArray(entries.app)) {\n        entries.app = [entries.app];\n      }\n      entries.app.unshift(swPath);\n    }\n    return entries;\n  };\n\n  // ... but do not register Workbox in development\n  if (webpackConfig.mode !== 'production') {\n    return webpackConfig;\n  }\n\n  const customManifestProps = {\n    navigateFallback: join(publicUrl, 'index.html'),\n  };\n\n  if (useServiceWorker) {\n    webpackConfig.plugins.push(\n      new GenerateSW({\n        ...defaultGenerateSWOptions,\n        ...customManifestProps,\n        ...generateSWOptions,\n      })\n    );\n  } else {\n    const props = {\n      ...defaultInjectManifestOptions,\n      ...customManifestProps,\n      ...injectManifestOptions,\n    };\n\n    webpackConfig.plugins.push(\n      // @ts-ignore: unused swSrc\n      new InjectManifest(props)\n    );\n  }\n\n  return webpackConfig;\n}\n"]}