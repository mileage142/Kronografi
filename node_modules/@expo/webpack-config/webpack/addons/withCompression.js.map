{"version":3,"file":"withCompression.js","sourceRoot":"","sources":["../../src/addons/withCompression.ts"],"names":[],"mappings":";;;;;AACA,8CAA4D;AAC5D,4FAA2D;AAE3D,gCAAmC;AAEnC,oCAAwD;AAExD;;GAEG;AACU,QAAA,oBAAoB,GAAG;IAClC,IAAI,EAAE,uBAAuB;IAC7B,QAAQ,EAAE,kBAAkB;IAC5B,SAAS,EAAE,MAAM;IACjB,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,GAAG;CACd,CAAC;AAEF;;;;;;GAMG;AACH,SAAwB,eAAe,CACrC,aAA+B,EAC/B,GAAuE;IAEvE,IAAI,aAAa,CAAC,IAAI,KAAK,YAAY,EAAE;QACvC,OAAO,aAAa,CAAC;KACtB;IAED,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,IAAI,8BAAsB,EAAE,CAAC;IAE9D,MAAM,MAAM,GAAG,eAAS,CAAC,GAAG,CAAC,CAAC;IAC9B,OAAO,qBAAqB,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AACtD,CAAC;AAZD,kCAYC;AAED;;;;;;GAMG;AACH,SAAgB,qBAAqB,CACnC,aAA+B,EAC/B,UAAsB;;IAEtB,MAAM,UAAU,GAAG,oCAA4B,aAC7C,UAAU,CAAC,GAAG,0CAAE,KAAK,0CAAE,IAAI,EAC3B,4BAAoB,EACpB,IAAI,CACL,CAAC;IAEF,IAAI,oBAAO,UAAU,CAAC,GAAG,0CAAE,KAAK,0CAAE,MAAM,CAAA,KAAK,WAAW,EAAE;QACxD,OAAO,CAAC,IAAI,CACV,kKAAkK,CACnK,CAAC;KACH;IAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC;QAAE,aAAa,CAAC,OAAO,GAAG,EAAE,CAAC;IAEtE,IAAI,UAAU;QAAE,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,oCAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;IAE9E,OAAO,aAAa,CAAC;AACvB,CAAC;AArBD,sDAqBC","sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { getPossibleProjectRoot } from '@expo/config/paths';\nimport CompressionPlugin from 'compression-webpack-plugin';\n\nimport { getConfig } from '../env';\nimport { AnyConfiguration, Environment } from '../types';\nimport { overrideWithPropertyOrConfig } from '../utils';\n\n/**\n * @internal\n */\nexport const DEFAULT_GZIP_OPTIONS = {\n  test: /static\\/.*\\.(js|css)$/,\n  filename: '[path].gz[query]',\n  algorithm: 'gzip',\n  threshold: 1024,\n  minRatio: 0.8,\n};\n\n/**\n * Add production compression options to the provided Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param env Environment used for getting the Expo project config.\n * @category addons\n */\nexport default function withCompression(\n  webpackConfig: AnyConfiguration,\n  env: Pick<Environment, 'projectRoot' | 'mode' | 'config' | 'locations'>\n): AnyConfiguration {\n  if (webpackConfig.mode !== 'production') {\n    return webpackConfig;\n  }\n\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n\n  const config = getConfig(env);\n  return addCompressionPlugins(webpackConfig, config);\n}\n\n/**\n * Add Gzip compression to the provided Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param expoConfig Expo config with compression options.\n * @internal\n */\nexport function addCompressionPlugins(\n  webpackConfig: AnyConfiguration,\n  expoConfig: ExpoConfig\n): AnyConfiguration {\n  const gzipConfig = overrideWithPropertyOrConfig(\n    expoConfig.web?.build?.gzip,\n    DEFAULT_GZIP_OPTIONS,\n    true\n  );\n\n  if (typeof expoConfig.web?.build?.brotli !== 'undefined') {\n    console.warn(\n      'The app.json value `expo.web.build.brotli` has been deprecated. You can add Brotli support manually by customizing the Webpack config with `expo customize:web`.'\n    );\n  }\n\n  if (!Array.isArray(webpackConfig.plugins)) webpackConfig.plugins = [];\n\n  if (gzipConfig) webpackConfig.plugins.push(new CompressionPlugin(gzipConfig));\n\n  return webpackConfig;\n}\n"]}