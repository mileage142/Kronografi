'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = mergeAsyncIterators;

var _iterall = require('iterall');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mergeAsyncIterators(...iterators) {
  const promises = iterators.map(() => null);

  return {
    next() {
      return (0, _asyncToGenerator3.default)(function* () {
        for (let i = 0; i < promises.length; i++) {
          if (!promises[i]) {
            promises[i] = iterators[i].next();
          }
        }

        var _ref = yield _promise2.default.race(promises.map((() => {
          var _ref3 = (0, _asyncToGenerator3.default)(function* (value, i) {
            return [i, yield value];
          });

          return function (_x, _x2) {
            return _ref3.apply(this, arguments);
          };
        })())),
            _ref2 = (0, _slicedToArray3.default)(_ref, 2);

        const i = _ref2[0],
              result = _ref2[1];

        promises[i] = null;
        return {
          done: false,
          value: result.value
        };
      })();
    },

    return() {
      return (0, _asyncToGenerator3.default)(function* () {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (0, _getIterator3.default)(iterators), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            const iterator = _step.value;

            if (iterator.return) {
              yield iterator.return();
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return {
          done: true,
          value: undefined
        };
      })();
    },

    throw(error) {
      return (0, _asyncToGenerator3.default)(function* () {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = (0, _getIterator3.default)(iterators), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            const iterator = _step2.value;

            if (iterator.throw) {
              yield iterator.throw(error);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return {
          done: true,
          value: undefined
        };
      })();
    },

    [_iterall.$$asyncIterator]() {
      return this;
    }
  };
}