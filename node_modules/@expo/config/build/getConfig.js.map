{"version":3,"file":"getConfig.js","sourceRoot":"","sources":["../src/getConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport { formatExecError } from 'jest-message-util';\nimport path from 'path';\n\nimport { ConfigContext, ExpoConfig } from './Config.types';\nimport { ConfigError } from './Errors';\nimport { fileExists } from './Modules';\n\n// support all common config types\nexport const allowedConfigFileNames: string[] = (() => {\n  const prefix = 'app';\n  return [\n    // order is important\n    // TODO: Bacon: Slowly rollout support for other config languages: ts, yml, toml\n    `${prefix}.config.js`,\n    `${prefix}.config.json`,\n  ];\n})();\n\nfunction isMissingFileCode(code: string): boolean {\n  return ['ENOENT', 'MODULE_NOT_FOUND', 'ENOTDIR'].includes(code);\n}\n\nfunction reduceExpoObject(config?: ExpoConfig): ExpoConfig | null {\n  if (!config) return null;\n\n  if (typeof config.expo === 'object') {\n    // TODO: We should warn users in the future that if there are more values than \"expo\", those values outside of \"expo\" will be omitted in favor of the \"expo\" object.\n    return config.expo as ExpoConfig;\n  }\n  return config;\n}\n\nexport function findAndEvalConfig(request: ConfigContext): ExpoConfig | null {\n  // TODO(Bacon): Support custom config path with `findConfigFile`\n  // TODO(Bacon): Should we support `expo` or `app` field with an object in the `package.json` too?\n\n  function testFileName(configFilePath: string): null | Partial<ExpoConfig> {\n    if (!fileExists(configFilePath)) return null;\n\n    try {\n      return evalConfig(configFilePath, request);\n    } catch (error) {\n      // If the file doesn't exist then we should skip it and continue searching.\n      if (!isMissingFileCode(error.code)) {\n        throw error;\n      }\n    }\n    return null;\n  }\n\n  if (request.configPath) {\n    const config = testFileName(request.configPath);\n    if (config) {\n      return reduceExpoObject(serializeAndEvaluate(config));\n    } else {\n      throw new ConfigError(\n        `Config with custom path ${request.configPath} couldn't be parsed.`,\n        'INVALID_CONFIG'\n      );\n    }\n  }\n\n  for (const configFileName of allowedConfigFileNames) {\n    const configFilePath = path.resolve(request.projectRoot, configFileName);\n    const config = testFileName(configFilePath);\n    if (config) return reduceExpoObject(serializeAndEvaluate(config));\n  }\n\n  return null;\n}\n\n// We cannot use async config resolution right now because Next.js doesn't support async configs.\n// If they don't add support for async Webpack configs then we may need to pull support for Next.js.\nfunction evalConfig(configFile: string, request: ConfigContext): Partial<ExpoConfig> {\n  let result: any;\n  if (configFile.endsWith('.json')) {\n    result = JsonFile.read(configFile, { json5: true });\n  } else {\n    try {\n      require('@babel/register')({\n        only: [configFile],\n      });\n\n      result = require(configFile);\n    } catch (error) {\n      if (isMissingFileCode(error.code) || !(error instanceof SyntaxError)) {\n        throw error;\n      }\n      const message = formatExecError(\n        error,\n        { rootDir: request.projectRoot, testMatch: [] },\n        { noStackTrace: true },\n        undefined,\n        true\n      );\n      throw new ConfigError(`\\n${message}`, 'INVALID_CONFIG');\n    }\n    if (result.default != null) {\n      result = result.default;\n    }\n    if (typeof result === 'function') {\n      result = result(request);\n    }\n  }\n\n  if (result instanceof Promise) {\n    throw new ConfigError(`Config file ${configFile} cannot return a Promise.`, 'INVALID_CONFIG');\n  }\n\n  return result;\n}\n\nexport function serializeAndEvaluate(val: any): any {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    // TODO: Bacon: Should we support async methods?\n    return val();\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluate);\n  } else if (typeof val === 'object') {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluate(val[property]);\n      }\n    }\n    return output;\n  }\n  // symbol\n  throw new ConfigError(`Expo config doesn't support \\`Symbols\\`: ${val}`, 'INVALID_CONFIG');\n}\n"]}