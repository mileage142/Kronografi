import { ExpRc, GetConfigOptions, ProjectConfig } from './Config.types';
/**
 * Evaluate the config for an Expo project.
 * If a function is exported from the `app.config.js` then a partial config will be passed as an argument.
 * The partial config is composed from any existing app.json, and certain fields from the `package.json` like name and description.
 *
 * You should use the supplied `mode` option in an `app.config.js` instead of `process.env.NODE_ENV`
 *
 * **Example**
 * ```js
 * module.exports = function({ config, mode }) {
 *   // mutate the config before returning it.
 *   config.slug = 'new slug'
 *   return config;
 * }
 *
 * **Supports**
 * - `app.config.js`
 * - `app.config.json`
 * - `app.json`
 *
 * @param projectRoot the root folder containing all of your application code
 * @param options enforce criteria for a project config
 */
export declare function getConfig(projectRoot: string, options: GetConfigOptions): ProjectConfig;
export declare function readConfigJson(projectRoot: string, skipValidation?: boolean, skipNativeValidation?: boolean): ProjectConfig;
export declare function readConfigJsonAsync(projectRoot: string, skipValidation?: boolean, skipNativeValidation?: boolean): Promise<ProjectConfig>;
export declare function findConfigFile(projectRoot: string): {
    configPath: string;
    configName: string;
    configNamespace: 'expo';
};
export declare function configFilename(projectRoot: string): string;
export declare function readExpRcAsync(projectRoot: string): Promise<ExpRc>;
export declare function setCustomConfigPath(projectRoot: string, configPath: string): void;
export declare function writeConfigJsonAsync(projectRoot: string, options: Object): Promise<ProjectConfig>;
export * from './Config.types';
